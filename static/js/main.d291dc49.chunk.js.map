{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Header/index.js","components/Footer/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Header","class","goal","total","status","Footer","App","state","emoji","clickedEmojisIds","score","_this","includes","setState","push","length","console","log","i","j","Math","floor","random","_ref","_this2","this","components_Header","components_Wrapper","map","components_Card","key","components_Footer","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d291dc49.chunk.js","sourcesContent":["import React from \"react\";      // REACT ALWAYS\nimport \"./Card.css\";            // COMPONENT CSS\n\nconst Card = props => (\n\n  <div className=\"card\">\n      <img alt={props.name} src={props.image} id={props.id}\n        onClick={() => props.shuffleScoreCard(props.id)}/>\n  </div>\n  \n);\n\nexport default Card;","import React from \"react\";      // REACT ALWAYS\nimport \"./Wrapper.css\";         // COMPONENT CSS\n\n\nconst Wrapper = props =>\n\n    <div>{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";      // REACT ALWAYS\nimport \"./Header.css\";          // COMPONENT CSS\n\n\nconst Header = props => (\n\n\n  <div class=\"navbar navbar-dark bg-primary\">\n    <div class=\"row\">\n\n      <div id=\"left\">\n        <h1 class=\"display-4\">Clicky Game</h1>\n      </div>\n\n      <div id=\"center\">\n        <h2>Click One Image to Begin</h2>\n        <h3>Do not click a Image Twice</h3>\n        <h4>Guess: Just {props.goal} times to win!</h4>\n      </div>\n\n      <div id=\"right\">\n        <h1 class=\"display-4\">Score: {props.total}</h1>\n        <h2 >{props.status}</h2>\n      </div>\n\n    </div>\n  </div>\n\n\n\n);\n\nexport default Header;\n","import React from \"react\";      // REACT ALWAYS\nimport \"./Footer.css\";            // COMPONENT CSS\n\nconst Footer = props => (\n\n\n  <footer class=\"navbar navbar-dark bg-primary\">\n    <div class=\"container\">\n      <h2 class=\"display-5\">Clicky Emoji Game - GOME</h2>\n    </div>\n  </footer>\n\n\n\n\n);\n\nexport default Footer;","import React, { Component } from \"react\"; // REACT ALWAYS\n\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nimport emoji from \"./cards.json\";\n\n\nimport \"./App.css\";         // COMPONENT CSS\n\nclass App extends Component {\n  state = {\n    emoji,\n    clickedEmojisIds: [],\n    score: 0,\n    goal: 15,\n    status: \"\"\n  };\n\n\n  shuffleScoreCard = id => {\n    let clickedEmojisIds = this.state.clickedEmojisIds;\n\n    if (clickedEmojisIds.includes(id)) {\n      this.setState({ clickedEmojisIds: [], score: 0, status: \"Game Over! Click to play again!\" });\n      return;\n    } else {\n      clickedEmojisIds.push(id)\n\n      if (clickedEmojisIds.length === 10) {\n        this.setState({ score: 10, status: \"You Won! Click to play again!\", clickedEmojisIds: [] });\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ emoji, clickedEmojisIds, score: clickedEmojisIds.length, status: \" \" });\n\n      for (let i = emoji.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [emoji[i], emoji[j]] = [emoji[j], emoji[i]];\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      // 1. GENERAL \n      // 2. HEADER\n      // 3. CARDS\n      // 4. FOOTER\n\n\n      <div class=\"container\" id=\"general\">\n\n        <Header total={this.state.score} goal={10} status={this.state.status} />\n\n        <Wrapper>\n\n          <div class=\"container\" id=\"allCards\">\n            {this.state.emoji.map(emoji => (<Card shuffleScoreCard={this.shuffleScoreCard} id={emoji.id} key={emoji.id} image={emoji.image} />))}\n          </div><br></br>\n\n        </Wrapper>\n\n        <Footer />\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}